// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/uesleicarvalhoo/sorveteria-tres-estrelas/auth"

	mock "github.com/stretchr/testify/mock"

	users "github.com/uesleicarvalhoo/sorveteria-tres-estrelas/users"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Authorize provides a mock function with given fields: ctx, token
func (_m *UseCase) Authorize(ctx context.Context, token string) (users.User, error) {
	ret := _m.Called(ctx, token)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(context.Context, string) users.User); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *UseCase) Login(ctx context.Context, email string, password string) (auth.JwtToken, error) {
	ret := _m.Called(ctx, email, password)

	var r0 auth.JwtToken
	if rf, ok := ret.Get(0).(func(context.Context, string, string) auth.JwtToken); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(auth.JwtToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, token
func (_m *UseCase) RefreshToken(ctx context.Context, token string) (auth.JwtToken, error) {
	ret := _m.Called(ctx, token)

	var r0 auth.JwtToken
	if rf, ok := ret.Get(0).(func(context.Context, string) auth.JwtToken); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(auth.JwtToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
