// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	balances "github.com/uesleicarvalhoo/sorveteria-tres-estrelas/balances"

	mock "github.com/stretchr/testify/mock"

	sales "github.com/uesleicarvalhoo/sorveteria-tres-estrelas/sales"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *UseCase) GetAll(ctx context.Context) ([]balances.Balance, error) {
	ret := _m.Called(ctx)

	var r0 []balances.Balance
	if rf, ok := ret.Get(0).(func(context.Context) []balances.Balance); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]balances.Balance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterFromSale provides a mock function with given fields: ctx, sale
func (_m *UseCase) RegisterFromSale(ctx context.Context, sale sales.Sale) (balances.Balance, error) {
	ret := _m.Called(ctx, sale)

	var r0 balances.Balance
	if rf, ok := ret.Get(0).(func(context.Context, sales.Sale) balances.Balance); ok {
		r0 = rf(ctx, sale)
	} else {
		r0 = ret.Get(0).(balances.Balance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sales.Sale) error); ok {
		r1 = rf(ctx, sale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterOperation provides a mock function with given fields: ctx, value, desc, tp
func (_m *UseCase) RegisterOperation(ctx context.Context, value float32, desc string, tp balances.OperationType) (balances.Balance, error) {
	ret := _m.Called(ctx, value, desc, tp)

	var r0 balances.Balance
	if rf, ok := ret.Get(0).(func(context.Context, float32, string, balances.OperationType) balances.Balance); ok {
		r0 = rf(ctx, value, desc, tp)
	} else {
		r0 = ret.Get(0).(balances.Balance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, float32, string, balances.OperationType) error); ok {
		r1 = rf(ctx, value, desc, tp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
