// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	balances "github.com/uesleicarvalhoo/sorveteria-tres-estrelas/balances"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, b
func (_m *Repository) Create(ctx context.Context, b balances.Balance) error {
	ret := _m.Called(ctx, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, balances.Balance) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *Repository) GetAll(ctx context.Context) ([]balances.Balance, error) {
	ret := _m.Called(ctx)

	var r0 []balances.Balance
	if rf, ok := ret.Get(0).(func(context.Context) []balances.Balance); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]balances.Balance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBetween provides a mock function with given fields: ctx, start, end
func (_m *Repository) GetBetween(ctx context.Context, start time.Time, end time.Time) ([]balances.Balance, error) {
	ret := _m.Called(ctx, start, end)

	var r0 []balances.Balance
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []balances.Balance); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]balances.Balance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
