// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	products "github.com/uesleicarvalhoo/sorveteria-tres-estrelas/products"

	uuid "github.com/google/uuid"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UseCase) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *UseCase) Get(ctx context.Context, id uuid.UUID) (products.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) products.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Index provides a mock function with given fields: ctx
func (_m *UseCase) Index(ctx context.Context) ([]products.Product, error) {
	ret := _m.Called(ctx)

	var r0 []products.Product
	if rf, ok := ret.Get(0).(func(context.Context) []products.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, name, varejoPrice, atacadoPrice, atacadoAmount
func (_m *UseCase) Store(ctx context.Context, name string, varejoPrice float64, atacadoPrice float64, atacadoAmount int) (products.Product, error) {
	ret := _m.Called(ctx, name, varejoPrice, atacadoPrice, atacadoAmount)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64, int) products.Product); ok {
		r0 = rf(ctx, name, varejoPrice, atacadoPrice, atacadoAmount)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, float64, float64, int) error); ok {
		r1 = rf(ctx, name, varejoPrice, atacadoPrice, atacadoAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, payload
func (_m *UseCase) Update(ctx context.Context, id uuid.UUID, payload products.UpdatePayload) (products.Product, error) {
	ret := _m.Called(ctx, id, payload)

	var r0 products.Product
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, products.UpdatePayload) products.Product); ok {
		r0 = rf(ctx, id, payload)
	} else {
		r0 = ret.Get(0).(products.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, products.UpdatePayload) error); ok {
		r1 = rf(ctx, id, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
