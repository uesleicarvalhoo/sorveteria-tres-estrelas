// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	payments "github.com/uesleicarvalhoo/sorveteria-tres-estrelas/payments"

	time "time"

	uuid "github.com/google/uuid"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// DeletePayment provides a mock function with given fields: ctx, id
func (_m *UseCase) DeletePayment(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *UseCase) GetAll(ctx context.Context) ([]payments.Payment, error) {
	ret := _m.Called(ctx)

	var r0 []payments.Payment
	if rf, ok := ret.Get(0).(func(context.Context) []payments.Payment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]payments.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPeriod provides a mock function with given fields: ctx, startAt, endAt
func (_m *UseCase) GetByPeriod(ctx context.Context, startAt time.Time, endAt time.Time) ([]payments.Payment, error) {
	ret := _m.Called(ctx, startAt, endAt)

	var r0 []payments.Payment
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []payments.Payment); ok {
		r0 = rf(ctx, startAt, endAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]payments.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, startAt, endAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPayment provides a mock function with given fields: ctx, value, desc
func (_m *UseCase) RegisterPayment(ctx context.Context, value float32, desc string) (payments.Payment, error) {
	ret := _m.Called(ctx, value, desc)

	var r0 payments.Payment
	if rf, ok := ret.Get(0).(func(context.Context, float32, string) payments.Payment); ok {
		r0 = rf(ctx, value, desc)
	} else {
		r0 = ret.Get(0).(payments.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, float32, string) error); ok {
		r1 = rf(ctx, value, desc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: ctx, id, value, desc
func (_m *UseCase) UpdatePayment(ctx context.Context, id uuid.UUID, value float32, desc string) (payments.Payment, error) {
	ret := _m.Called(ctx, id, value, desc)

	var r0 payments.Payment
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float32, string) payments.Payment); ok {
		r0 = rf(ctx, id, value, desc)
	} else {
		r0 = ret.Get(0).(payments.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, float32, string) error); ok {
		r1 = rf(ctx, id, value, desc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
