{
    "swagger": "2.0",
    "info": {
        "description": "API para o cadastro de produtos, controle de vendas e fluxo de caixa para a sorveteria três estrelas",
        "title": "Sorveteria três estrelas - API",
        "contact": {},
        "version": "1.0"
    },
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Make login and get access-token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "user info",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/auth.JwtToken"
                            }
                        }
                    },
                    "401": {
                        "description": "when email or password is invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "description": "Get a new access-token, this action will be expire the last one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh access-token",
                "parameters": [
                    {
                        "description": "the refresh token",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/auth.JwtToken"
                            }
                        }
                    },
                    "401": {
                        "description": "when token is invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check app and dependencies status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health check"
                ],
                "summary": "Health Cehck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/popsicles/": {
            "get": {
                "description": "Get all popsicles data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Popsicle"
                ],
                "summary": "Get all popsicles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Popsicle"
                            }
                        }
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            },
            "post": {
                "description": "create a new popsicle and return data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Popsicle"
                ],
                "summary": "Create a New Popsicle",
                "parameters": [
                    {
                        "description": "the popsicle data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePopsiclePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Popsicle"
                        }
                    },
                    "422": {
                        "description": "when data is invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            }
        },
        "/popsicles/{id}": {
            "get": {
                "description": "Get popsicle Data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Popsicle"
                ],
                "summary": "Get Popsicle by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of popsicle",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Popsicle"
                        }
                    },
                    "422": {
                        "description": "when id is invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete popscile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Popsicle"
                ],
                "summary": "Delete Popsicle by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of popsicle",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            }
        },
        "/sales": {
            "get": {
                "description": "Get all sales",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sales"
                ],
                "summary": "List Sales",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Sale"
                            }
                        }
                    },
                    "422": {
                        "description": "when start or end param is invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            },
            "post": {
                "description": "Register a sale and return sale data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sales"
                ],
                "summary": "Register a new sale",
                "parameters": [
                    {
                        "description": "the payload data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterSalePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Sale"
                            }
                        }
                    },
                    "422": {
                        "description": "when payload is invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user and return user data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "description": "the user data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "422": {
                        "description": "when payload is invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "description": "Get current user data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Me",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "401": {
                        "description": "when user isn't logged",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    },
                    "500": {
                        "description": "when an error occurs",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageJSON"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.JwtToken": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expiration": {
                    "type": "integer"
                },
                "grant_type": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.CreatePopsiclePayload": {
            "type": "object",
            "properties": {
                "flavor": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "dto.CreateUserPayload": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.LoginPayload": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.MessageJSON": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.RefreshTokenPayload": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterSalePayload": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CartItem"
                    }
                },
                "payment_type": {
                    "type": "string"
                }
            }
        },
        "entity.CartItem": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "entity.Popsicle": {
            "type": "object",
            "required": [
                "flavor",
                "price"
            ],
            "properties": {
                "flavor": {
                    "type": "string",
                    "minLength": 4
                },
                "id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "entity.Sale": {
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/entity.SaleItem"
                    }
                },
                "payment_type": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "entity.SaleItem": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "unit_price": {
                    "type": "number"
                }
            }
        },
        "entity.User": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}